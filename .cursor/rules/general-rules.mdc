---
alwaysApply: true
---
# General Rules for Our Project

## 1. Core Technology Stack
- **Framework**: Always use Next.js version 15+ with the App Router.
- **Language**: All code must be written in TypeScript. Use strong types for props, state, and function arguments/return values.
- **Package Manager**: Always use `bun`. Any commands for installing dependencies must use `bun add [package]`. For running scripts, use `bun dev`, `bun build`, etc. For running packages, use `bunx`.

## 2. Component Philosophy & UI
- **UI Library**: The primary UI library is **Shadcn UI**. DO NOT generate custom-styled components from scratch.
- **Component Usage**:
  - To add a new component (e.g., alert-dialog, avatar, table), you must first instruct me to run the command: `bunx shadcn@latest add [component-name]`.
  - Always compose UI by importing components from `@/components/ui/[component-name]`. For example: `import { Button } from "@/components/ui/button";`.
  - Custom components that are built by composing Shadcn UI components should be placed in `@/components/custom/`.
- **Icons**: For icons, use the `lucide-react` library. It is installed by default with Shadcn UI.

## 3. Styling
- **Styling Method**: All styling must be done using **Tailwind CSS utility classes**.
- **No Custom CSS**: Do not write custom CSS files or use inline `style={{}}` objects unless absolutely necessary for a dynamic value.
- **Theme**: Adhere to the theme defined in `tailwind.config.ts`. Use theme colors like `primary`, `secondary`, `destructive`, `muted`, `accent`, etc.

## 4. Next.js App Router Conventions
- **Server Components by Default**: All components should be React Server Components (RSCs) by default.
- **Client Components**: Only add the `"use client"` directive at the top of a file if the component requires interactivity (e.g., using hooks like `useState`, `useEffect`, or handling browser events).
- **File Structure**:
  - Pages are created inside the `/app` directory (e.g., `/app/dashboard/page.tsx`).
  - Layouts are `layout.tsx`. Loading states are `loading.tsx`. Error states are `error.tsx`.
- **Data Fetching**: For data fetching in Server Components, use modern `async/await` syntax directly within the component.

## 5. Code Quality & Best Practices
- **Comments**: Generate JSDoc comments for component props and complex functions to explain their purpose.
- **Props**: Component props should be clearly defined in a `type` or `interface` right above the component definition.
- **File Naming**: Use kebab-case for file and folder names (e.g., `user-profile/page.tsx`).
